```{r, include=FALSE}
knitr::opts_chunk$set(message = FALSE, warning = FALSE, echo = FALSE)
library(dplyr)
library(tidyr)
library(kableExtra)
library(ggplot2)
library(data.table)
library(dplyr)
library(tidyr)
library(ggh4x)
library(patchwork)
library(scales)



# Read the convergence rate results
conv_rate_study_1 <- readRDS("../simulation/results/convergence_rate1.rds")
conv_rate_study_2 <- readRDS("../simulation/results/convergence_rate2.rds")
conv_rate_study_3 <- readRDS("../simulation/results/convergence_rate3.rds")


conv_rate1 <- conv_rate_study_1 %>%
  mutate(
    ConvergenceRate = ConvergedCount / (ConvergedCount + NotConvergedCount + ImproperSolutionCount),
    ProperSolutionRate = 1 - (ImproperSolutionCount / ConvergedCount),
    CombinedLabel = paste(sprintf("%.1f", ConvergenceRate), "\n(", sprintf("%.1f", ProperSolutionRate), ")", sep = ""),
    method = gsub("_", "-", method),
    model_type = case_when(
      model_type == "1.1" ~ "no measurement MP",
      model_type == "1.2" ~ "cross loadings",
      model_type == "1.3" ~ "correlated errors",
      model_type == "1.4" ~ "structural misspecification",
      TRUE ~ model_type )
  ) %>%
  select(model_type, N, reliability, method, ConvergenceRate, ProperSolutionRate, CombinedLabel)


# Create the heatmap with labeled metrics and heatmap fill
fig_conv_rate_study1 <- conv_rate1 %>%
  ggplot(aes(x = factor(N, labels = paste("N =", c(100, 400, 6400))), y = model_type)) +
  geom_tile(aes(fill = ConvergenceRate), color = "white") +
  geom_text(aes(label = CombinedLabel), size = 2.5, color = "black") +
  scale_fill_gradient2(low = "#ff6f61", mid = "#ffa500", high = "#7fc97f", midpoint = 0.5, 
                       limits = c(0, 1), oob = scales::squish, name = "Convergence Rate (%)") +
  ggh4x::facet_nested(factor(reliability, labels = paste("r =", c(0.3, 0.5, 0.7))) ~ method, 
                      scales = "free", space = "free", switch = "y") +
  theme_bw() +
  theme(
    text = element_text(size = 8),
    axis.text.x = element_text(size = 7, angle = 45, hjust = 1),
    axis.text.y = element_text(size = 7),
    legend.position = "right", 
    legend.title = element_text(size = 8),
    legend.text = element_text(size = 7),
    strip.text.y = element_text(size = 7),
    strip.text.x = element_text(size = 15),
    panel.grid = element_blank(),
    axis.title.x = element_blank(),
    axis.title.y = element_blank()
  ) +
  labs(
    x = "Sample Size",
    y = "Model Type"
  ) +
  scale_y_discrete(expand = c(0, 0), position = "right")


# Prepare the data with formatted rate values between 0 and 1 for study 2
conv_rate2 <- conv_rate_study_2 %>%
  mutate(
    ConvergenceRate = ConvergedCount / (ConvergedCount + NotConvergedCount + ImproperSolutionCount),
    ProperSolutionRate = 1 - (ImproperSolutionCount / ConvergedCount),
    CombinedLabel = paste(sprintf("%.1f", ConvergenceRate), "\n(", sprintf("%.1f", ProperSolutionRate), ")", sep = ""),
    method = gsub("_", "-", method),
    R_squared_label = factor(paste0("R^2==", R_squared)),  # Create the parsed R_squared label
    model_type = case_when(
      model_type == "2.1" ~ "no measurement MP",
      model_type == "2.2_exo" ~ "exogenous",
      model_type == "2.2_endo" ~ "endogenous",
      model_type == "2.2_both" ~ "endo- & exogenous",
      TRUE ~ model_type )
  ) %>%
  select(model_type, N, reliability, R_squared, R_squared_label, method, ConvergenceRate, ProperSolutionRate, CombinedLabel)

# Create the heatmap for study 2 with centered values
p_convergence_heatmap_study2 <- conv_rate2 %>%
  ggplot(aes(x = factor(N, labels = paste("N =", c(100, 400, 6400))), y = model_type)) +
  geom_tile(aes(fill = ConvergenceRate), color = "white") +
  geom_text(aes(label = CombinedLabel), size = 3, color = "black", vjust = 0.5, lineheight = 0.9) +
  scale_fill_gradient2(low = "#ff6f61", mid = "#ffa500", high = "#7fc97f", midpoint = 0.5, 
                       limits = c(0, 1), oob = scales::squish, name = "Convergence Rate") +
  ggh4x::facet_nested(
    factor(reliability, labels = paste("r =", c(0.3, 0.5, 0.7))) ~ method + R_squared_label,
    scales = "free", 
    space = "free", 
    switch = "y",
    labeller = labeller(R_squared_label = label_parsed, .default = label_value)  # Specify labellers
  ) +
  theme_bw() +
  theme(
    text = element_text(size = 8),
    axis.text.x = element_text(size = 8, angle = 30, hjust = 1), 
    axis.text.y = element_text(size = 8),
    legend.position = "right", 
    legend.title = element_text(size = 10),
    legend.text = element_text(size = 8),
    strip.text.y = element_text(size = 10),
    strip.text.x = element_text(size = 14),
    strip.placement = "outside",
    panel.grid = element_blank(),
    axis.title.x = element_blank(),
    axis.title.y = element_blank(),
    panel.spacing = unit(0.5, "lines")
  ) +
  labs(
    x = "Sample Size",
    y = "Model Type"
  ) +
  scale_y_discrete(expand = c(0, 0), position = "right")

# Process convergence rate data
conv_rate3 <- conv_rate_study_3 %>%
  mutate(
    ConvergenceRate = ConvergedCount / (ConvergedCount + NotConvergedCount + ImproperSolutionCount),
    ProperSolutionRate = ifelse(
      ConvergedCount == 0,
      NA,
      1 - (ImproperSolutionCount / ConvergedCount)
    ),
    method = gsub("_", "-", method),
    model_type = case_when(
      model_type == "3.1" ~ "positive CL",
      model_type == "3.2" ~ "positive CR",
      model_type == "3.1_negative" ~ "negative CL",
      model_type == "3.2_negative" ~ "negative CR",
      TRUE ~ model_type
    ),
    CombinedLabel = ifelse(
      ConvergenceRate < 0.1,
      "<0.1",
      paste0(
        sprintf("%.1f", ConvergenceRate),
        "\n(",
        sprintf("%.1f", ProperSolutionRate),
        ")"
      )
    ),
    N = factor(N, levels = c(50, 100, 400, 6400)),
    reliability = factor(paste("r =", reliability), levels = paste("r =", c(0.3, 0.5, 0.7)))
  ) %>%
  select(
    model_type,
    N,
    reliability,
    method,
    ConvergenceRate,
    ProperSolutionRate,
    CombinedLabel
  )

# Adjusted plotting code
fig_conv_rate_study3 <- conv_rate3 %>%
  ggplot(aes(
    x = factor(N, labels = paste("N =", c(50, 100, 400, 6400))),
    y = model_type
  )) +
  geom_tile(aes(fill = ConvergenceRate), color = "white") +
  geom_text(aes(label = CombinedLabel), size = 2.5, color = "black") +
  scale_fill_gradient2(
    low = "#ff6f61",
    mid = "#ffa500",
    high = "#7fc97f",
    midpoint = 0.5,
    limits = c(0, 1),
    oob = scales::squish,
    name = "Convergence Rate"
  ) +
  ggh4x::facet_nested(
    factor(reliability, labels = paste("r =", c(0.3, 0.5, 0.7))) ~ method,
    scales = "free",
    space = "free",
    switch = "y"
  ) +
  theme_bw() +
  theme(
    text = element_text(size = 8),
    axis.text.x = element_text(size = 10, angle = 45, hjust = 1),
    axis.text.y = element_text(size = 10),
    legend.position = "right",
    legend.title = element_text(size = 10),
    legend.text = element_text(size = 8),
    strip.text.y = element_text(size = 10),
    strip.text.x = element_text(size = 14),
    panel.grid = element_blank(),
    axis.title.x = element_blank(),
    axis.title.y = element_blank()
  ) +
  labs(
    x = "Sample Size",
    y = "Model Type"
  ) +
  scale_y_discrete(expand = c(0, 0), position = "right")


```

```{r, include=FALSE}
param_summary_study_1 <- readRDS("../simulation/results/parameter_wise_summary_study1.rds")
aggr_summary_study_1 <- readRDS("../simulation/results/aggregated_summary_study1.rds")

param_summary_study_2 <- readRDS("../simulation/results/parameter_wise_summary_study2.rds")
aggr_summary_study_2 <- readRDS("../simulation/results/aggregated_summary_study2.rds")

param_summary_study_3 <- readRDS("../simulation/results/parameter_wise_summary_study3.rds")
aggr_summary_study_3 <- readRDS("../simulation/results/aggregated_summary_study3.rds")


# Prepare data for study 1 parameterwise bias plot:
plot_data_study_1 <- param_summary_study_1 %>%
  select(N, reliability, method, parameter, Bias, model_type, RMSE) %>%
  mutate(
    N = factor(N, levels = c(100, 400, 6400)),
    reliability = factor(reliability, levels = c(0.3, 0.5, 0.7)),
    method = factor(method, levels = unique(method)), 
    method = gsub("_", "-", method),
    model_type = case_when(
      model_type == "1.1" ~ "no measurement MP",
      model_type == "1.2" ~ "cross loadings",
      model_type == "1.3" ~ "correlated errors",
      model_type == "1.4" ~ "structural MP",
      TRUE ~ model_type 
    ),
    reliability = factor(paste("r =", reliability), levels = paste("r =", c(0.3, 0.5, 0.7)))
  ) %>%
  arrange(parameter) %>%
  mutate(parameter = factor(parameter, levels = unique(parameter)))

# Prepare data for aggregated bias plot study 1:
plot_data_aggregated_study1 <- aggr_summary_study_1 %>%
  select(model_type, N, reliability, method, mean_Bias, mean_RelativeBias, mean_MCSE_Bias, mean_MCSE_RMSE, mean_RMSE) %>%
  mutate(
    N = factor(N, levels = c(100, 400, 6400)),
    reliability = factor(reliability, levels = c(0.3, 0.5, 0.7)),
    method = factor(method, levels = unique(method)),
    method = gsub("_", "-", method),
    model_type = case_when(
      model_type == "1.1" ~ "no MP", 
      model_type == "1.2" ~ "cross loadings",
      model_type == "1.3" ~ "correlated errors",
      model_type == "1.4" ~ "structural MP",
      TRUE ~ model_type
    ),
    model_type = factor(model_type, levels = c("structural MP", "correlated errors", "cross loadings", "no MP")),
    reliability = factor(paste("r =", reliability), levels = paste("r =", c(0.3, 0.5, 0.7)))
  )

# Prepare data for study 2 misspec bias plot:
misspecified_paths <- c("f3~f1", "f4~f3", "f3~f2")
plot_data_study_2 <- param_summary_study_2 %>%
  #filter(R_squared == 0.4, b == 3) %>% 
  select(N, reliability, method, parameter, Bias, model_type, RMSE) %>%
  mutate(
    N = factor(N, levels = c(100, 400, 6400)),
    reliability = factor(reliability, levels = c(0.3, 0.5, 0.7)),
    method = factor(method, levels = unique(method)), 
    method = gsub("_", "-", method),
    model_type = case_when(
      model_type == "2.1" ~ "no measurement MP",
      model_type == "2.2_exo" ~ "exogenous MP",
      model_type == "2.2_endo" ~ "endogenous MP",
      model_type == "2.2_both" ~ "endo- & exogenous MP",
      TRUE ~ model_type
    ),
    model_type = factor(model_type, levels = c("no measurement MP", "exogenous MP", "endogenous MP", "endo- & exogenous MP")),
    reliability = factor(paste("r =", reliability), levels = paste("r =", c(0.3, 0.5, 0.7)))
  ) %>%
  arrange(parameter) %>%
  mutate(parameter = factor(parameter, levels = unique(parameter)))


# Prepare data for study 3 parameterwise bias plot:

# simplified method names

aggr_summary_study_3 <- aggr_summary_study_3 %>%
  mutate(method = case_when(
    method == "lSAM_ML" ~ "lSAM",
    TRUE ~ method
  ))

param_summary_study_3 <- param_summary_study_3 %>%
  mutate(method = case_when(
    method == "lSAM_ML" ~ "lSAM",
    TRUE ~ method
  ))

plot_data_study_3 <- param_summary_study_3 %>%
  select(N, reliability, method, parameter, Bias, model_type, RMSE) %>%
  mutate(
    N = factor(N, levels = c(50, 100, 400, 6400)),
    reliability = factor(reliability, levels = c(0.3, 0.5, 0.7)),
    method = gsub("_", "-", method),
    method = factor(method, levels = unique(method)), 
    model_type = case_when(
      model_type == "3.1" ~ "positive CL",
      model_type == "3.2" ~ "positive CR",
      model_type == "3.1_negative" ~ "negative CL",
      model_type == "3.2_negative" ~ "negative CR",
      TRUE ~ model_type
    ),
    model_type = factor(model_type, levels = c("positive CL", "negative CL", "positive CR", "negative CR")),
    reliability = factor(paste("r =", reliability), levels = paste("r =", c(0.3, 0.5, 0.7)))
  ) %>%
  arrange(parameter) %>%
  mutate(parameter = factor(parameter, levels = unique(parameter)))

full_grid_paramwise <- expand.grid(
  model_type = c("positive CL", "positive CR", "negative CL", "negative CR"),
  N = c(50, 100, 400, 6400),
  reliability = c(0.3, 0.5, 0.7),
  method = levels(plot_data_study_3$method),
  parameter = levels(plot_data_study_3$parameter),
  stringsAsFactors = FALSE
)

# Adjust factors for merging
full_grid_paramwise$N <- factor(full_grid_paramwise$N, levels = c(50, 100, 400, 6400))
full_grid_paramwise$reliability <- factor(paste("r =", full_grid_paramwise$reliability), levels = paste("r =", c(0.3, 0.5, 0.7)))
full_grid_paramwise$model_type <- factor(full_grid_paramwise$model_type, levels = c("positive CL", "negative CL", "positive CR", "negative CR"))
full_grid_paramwise$method <- factor(full_grid_paramwise$method, levels = levels(plot_data_study_3$method))
full_grid_paramwise$parameter <- factor(full_grid_paramwise$parameter, levels = levels(plot_data_study_3$parameter))

# Merge data and convergence rate
full_data_paramwise <- full_grid_paramwise %>%
  left_join(plot_data_study_3, by = c("model_type", "N", "reliability", "method", "parameter")) %>%
  left_join(conv_rate3, by = c("model_type", "N", "reliability", "method")) %>%
  mutate(
    ConvergenceRateFlag = ifelse(!is.na(ConvergenceRate) & ConvergenceRate < 0.5, TRUE, FALSE)
  )

# Set Bias_plot and RMSE_plot
full_data_paramwise <- full_data_paramwise %>%
  mutate(
    Bias_plot = ifelse(ConvergenceRateFlag == TRUE | is.na(Bias), NA, Bias),
    RMSE_plot = ifelse(ConvergenceRateFlag == TRUE | is.na(RMSE), NA, RMSE)
  )

# Prepare data for aggregated bias and RMSE plots study 3:
plot_data_aggregated_study3 <- aggr_summary_study_3 %>%
  select(
    model_type, N, reliability, method, mean_Bias, mean_RMSE,
    mean_RelativeBias, mean_MCSE_Bias, mean_MCSE_RMSE
  ) %>%
  mutate(
    N = factor(N, levels = c(50, 100, 400, 6400)),
    reliability = factor(paste("r =", reliability), levels = paste("r =", c(0.3, 0.5, 0.7))),
    method = gsub("_", "-", method),
    method = factor(method, levels = unique(method)),
    model_type = case_when(
      model_type == "3.1" ~ "positive CL",
      model_type == "3.2" ~ "positive CR",
      model_type == "3.1_negative" ~ "negative CL",
      model_type == "3.2_negative" ~ "negative CR",
      TRUE ~ model_type
    )
  )


# Ensure full grid for study 3
full_grid <- expand.grid(
  model_type = c("positive CL", "positive CR", "negative CL", "negative CR"),
  N = c(50, 100, 400, 6400),
  reliability = c(0.3, 0.5, 0.7),
  method = levels(plot_data_aggregated_study3$method),
  stringsAsFactors = FALSE
)

# Adjust factors for merging
full_grid$N <- factor(full_grid$N, levels = c(50, 100, 400, 6400))
full_grid$reliability <- factor(paste("r =", full_grid$reliability), levels = paste("r =", c(0.3, 0.5, 0.7)))
full_grid$model_type <- factor(full_grid$model_type, levels = c("positive CL", "negative CL", "positive CR", "negative CR"))
full_grid$method <- factor(full_grid$method, levels = levels(plot_data_aggregated_study3$method))

# Merge data and convergence rate
full_data_study3 <- full_grid %>%
  left_join(plot_data_aggregated_study3, by = c("model_type", "N", "reliability", "method")) %>%
  left_join(conv_rate3, by = c("model_type", "N", "reliability", "method")) %>%
  mutate(
    ConvergenceRateFlag = ifelse(!is.na(ConvergenceRate) & ConvergenceRate < 0.5, TRUE, FALSE)
  )

# Set mean_Bias_plot and mean_RMSE_plot
full_data_study3<- full_data_study3%>%
  mutate(
    mean_Bias_plot = ifelse(ConvergenceRateFlag == TRUE | is.na(mean_Bias), NA, mean_Bias),
    mean_RMSE_plot = ifelse(ConvergenceRateFlag == TRUE | is.na(mean_RMSE), NA, mean_RMSE)
  )
```

```{r, include=FALSE}
# Parameterwise bias for study 1

full_grid <- expand.grid(
  N = factor(c(100, 400, 6400), levels = c(100, 400, 6400)),
  reliability = factor(paste("r =", c(0.3, 0.5, 0.7)), levels = paste("r =", c(0.3, 0.5, 0.7))),
  method = unique(plot_data_study_1$method),
  parameter = unique(plot_data_study_1$parameter),
  model_type = unique(plot_data_study_1$model_type)
)

plot_data_study_1_complete <- full_grid %>%
  left_join(plot_data_study_1, by = c("N", "reliability", "method", "parameter", "model_type"))

bias_data_plot_study1 <- plot_data_study_1

fig_bias_parameterwise_study1 <- bias_data_plot_study1 %>%
  ggplot(aes(x = N, y = parameter)) +
  geom_tile(aes(fill = Bias), color = "white") +
  geom_text(aes(label = sprintf("%.2f", Bias)), size = 1.5, show.legend = FALSE) +  
  scale_fill_gradient2(low = "blue", mid = "white", high = "red", midpoint = 0, 
                       limits = c(-0.5, 0.5), 
                       oob = scales::squish) + 
  ggh4x::facet_nested(model_type + reliability ~ method, scales = "free", space = "free", switch="y") +
  theme_bw() +
  theme(
    text = element_text(size = 8), 
    axis.text.x = element_text(size = 8),
    axis.text.y = element_text(size = 5),
    legend.position = "none", 
    legend.title = element_text(size = 8),
    legend.text = element_text(size = 8),
    strip.text.y = element_text(size = 6),
    strip.text.x = element_text(size = 12),
    legend.key.width = unit(1, "cm"),
    panel.grid = element_line(linewidth = 0.01, color = "gray98"),
    axis.title.x = element_blank(),
    axis.title.y = element_blank()
  ) +
  guides(fill = guide_colorbar(title.position = "top", title.hjust = 0.5, barheight = 5, barwidth = 0.5, direction = "vertical")) +
  labs(
    x = "\n Sample Size",
    y = "Parameter \n",
    fill = "Bias"
  ) +
  scale_y_discrete(expand = c(0,0), position = "right") +
  scale_x_discrete(expand = c(0,0))
```

```{r, include=FALSE}

fig_bias_aggregated_study1 <- plot_data_aggregated_study1 %>%
  mutate(
    label_bias = sprintf("%.3f", mean_Bias),
    label_mcse = sprintf("(±%.3f)", mean_MCSE_Bias)
  ) %>%
  ggplot(aes(x = N, y = model_type)) +
  geom_tile(aes(fill = mean_Bias), color = "white") +
  geom_text(aes(label = label_bias), size = 4, color = "black", vjust = -0.5) +
  geom_text(aes(label = label_mcse), size = 3, color = "grey40", vjust = 1.5) +
  scale_fill_gradient2(low = "white", high = "red", limits = c(0, 0.5), oob = scales::squish) +
  ggh4x::facet_nested(reliability ~ method, scales = "free", space = "free", switch = "y") +
  theme_bw() +
  theme(
    text = element_text(size = 12),
    axis.text.y = element_text(size = 12),
    legend.position = "none",
    strip.text.y = element_text(size = 12),
    strip.text.x = element_text(size = 15),
    panel.grid = element_blank(),
    axis.title.x = element_blank(),
    axis.title.y = element_blank()
  ) +
  labs(
    x = "Sample Size",
    y = "Model Type",
    fill = "Mean Bias"
  ) +
  scale_y_discrete(expand = c(0, 0), position = "right") +
  scale_x_discrete(expand = c(0, 0))


fig_rmse_aggregated_study1 <- plot_data_aggregated_study1 %>%
  mutate(
    label_rmse = sprintf("%.3f", mean_RMSE),
    label_mcse = sprintf("(±%.3f)", mean_MCSE_RMSE)
  ) %>%
  ggplot(aes(x = N, y = model_type)) +
  geom_tile(aes(fill = mean_RMSE), color = "white") +
  geom_text(aes(label = label_rmse), size = 4, color = "black", vjust = -0.5) +
  geom_text(aes(label = label_mcse), size = 3, color = "grey40", vjust = 1.5) +
  scale_fill_gradient2(low = "white", high = "red", limits = c(0, 0.5), oob = scales::squish) +
  ggh4x::facet_nested(reliability ~ method, scales = "free", space = "free", switch = "y") +
  theme_bw() +
  theme(
    text = element_text(size = 12),
    axis.text.y = element_text(size = 12),
    legend.position = "none",
    strip.text.y = element_text(size = 12),
    strip.text.x = element_text(size = 15),
    panel.grid = element_blank(),
    axis.title.x = element_blank(),
    axis.title.y = element_blank()
  ) +
  labs(
    x = "Sample Size",
    y = "Model Type",
    fill = "Mean RMSE"
  ) +
  scale_y_discrete(expand = c(0, 0), position = "right") +
  scale_x_discrete(expand = c(0, 0))
```

```{r, include=FALSE}
data_plot2 <- plot_data_study_2 %>%
  filter(!parameter %in% misspecified_paths)

fig_relbias_parameterwise_study2 <- data_plot2 %>%
  ggplot(aes(x = N, y = parameter)) +
  geom_tile(aes(fill = Bias), color = "white") +
  geom_text(aes(label = sprintf("%.2f", round(Bias, 2))), size = 1.5, show.legend = FALSE) +
  scale_fill_gradient2(low = "blue", mid = "white", high = "red", midpoint = 0, 
                       limits = c(-0.5, 0.5), 
                       oob = scales::squish) +
  ggh4x::facet_nested(model_type + reliability ~ method, scales = "free", space = "free", switch="y") +
  theme_bw() +
  theme(
    plot.margin = unit(c(0, 0, 0, 0), "cm"),
    text = element_text(size = 10),
    axis.text.x = element_text(size = 10),
    axis.text.y = element_text(size = 6),
    legend.position = "none", 
    legend.title = element_text(size = 8),
    legend.text = element_text(size = 8),
    strip.text.y = element_text(size = 7),
    strip.text.x = element_text(size = 12),
    legend.key.width = unit(1.4, "cm"),
    panel.grid = element_line(linewidth = 0.01, color = "gray98"),
    axis.title.x = element_blank(),
    axis.title.y = element_blank()
  ) +
  guides(fill = guide_colorbar(title.position = "top", title.hjust = 0.5, barheight = 7, barwidth = 0.5, direction = "vertical")) +
  labs(
    x = "\n Sample Size",
    y = "Parameter \n",
    fill = "Bias"
  ) +
  scale_y_discrete(expand = c(0,0), position = "right") +
  scale_x_discrete(expand = c(0,0))
```

```{r, include=FALSE}
# Prepare base data with consistent structure
plot_data_study_2 <- param_summary_study_2 %>%
  select(N, reliability, method, parameter, Bias, MCSE_Bias, model_type, RMSE, R_squared, b) %>%
  mutate(
    N = factor(N, levels = c(100, 400, 6400)),
    reliability = factor(reliability, levels = c(0.3, 0.5, 0.7)),
    method = gsub("_", "-", method),
    model_type = case_when(
      model_type == "2.1" ~ "no measurement MP",
      model_type == "2.2_exo" ~ "exogenous MP",
      model_type == "2.2_endo" ~ "endogenous MP",
      model_type == "2.2_both" ~ "endo- & exogenous MP",
      TRUE ~ model_type
    ),
    model_type = factor(model_type, 
                        levels = c("no measurement MP", "exogenous MP", 
                                   "endogenous MP", "endo- & exogenous MP"))
  ) %>%
  # Filter based on method-specific conditions
  filter(
    !(method == "gSAM" & b == 3),  # Remove b=3 for gSAM
    !(method == "SEM" & b != 3)     # Keep only one b value for SEM
  )

# Filter and aggregate misspecified paths
misspecified_paths <- c("f3~f1", "f4~f3", "f3~f2")
aggregated_misspec_bias <- plot_data_study_2 %>%
  filter(parameter %in% misspecified_paths) %>%
  group_by(model_type, N, reliability, method, R_squared, b) %>%
  summarize(
    mean_abs_misspec_bias = mean(abs(Bias), na.rm = TRUE),
    mean_mcse = mean(MCSE_Bias, na.rm = TRUE),
    relative_mcse = (mean_mcse / mean_abs_misspec_bias) * 100,
    mcse_flag = relative_mcse > 10,
    .groups = 'drop'
  ) %>%
  mutate(
    reliability_label = factor(paste0("r==", reliability)),
    R_squared_label = factor(paste0("R^2==", R_squared)),
    # Create b_label only for non-SEM methods
    b_label = case_when(
      method == "SEM" ~ "",
      TRUE ~ paste0("b==", b)
    ),
    # Create label with just asterisk for high MCSE cases
    display_label = sprintf("%.2f%s", 
                            mean_abs_misspec_bias,
                            ifelse(mcse_flag, "*", ""))
  )

# Calculate overall MCSE range for flagged cases
mcse_range <- plot_data_study_2 %>%
  filter(parameter %in% misspecified_paths) %>%
  left_join(
    aggregated_misspec_bias %>% 
      select(model_type, N, reliability, method, R_squared, b, mcse_flag),
    by = c("model_type", "N", "reliability", "method", "R_squared", "b")
  ) %>%
  filter(mcse_flag) %>%
  summarize(
    min_mcse = min(MCSE_Bias, na.rm = TRUE),
    max_mcse = max(MCSE_Bias, na.rm = TRUE)
  )

# Create visualization with method-specific faceting
fig_bias_aggregated_misspec_study2 <- aggregated_misspec_bias %>%
  ggplot(aes(x = N, y = model_type)) +
  geom_tile(aes(fill = mean_abs_misspec_bias), color = "white") +
  geom_text(aes(label = display_label), 
            size = 2.5, 
            color = "black") +
  scale_fill_gradient(
    low = "white",
    high = "red",
    limits = c(0, 0.5),
    oob = scales::squish
  ) +
  ggh4x::facet_nested(
    reliability_label ~ method + b_label + R_squared_label,
    scales = "free",
    space = "free",
    switch = "y",
    labeller = labeller(
      reliability_label = label_parsed,
      R_squared_label = label_parsed,
      b_label = label_parsed
    )
  ) +
  theme_bw() +
  theme(
    text = element_text(size = 8),
    axis.text.x = element_text(size = 7, angle = 45, hjust = 1),
    axis.text.y = element_text(size = 7),
    legend.position = "none",
    strip.text.y = element_text(size = 7),
    strip.text.x = element_text(size = 7),
    panel.grid = element_blank(),
    axis.title.x = element_blank(),
    axis.title.y = element_blank()
  ) +
  labs(
    x = "Sample Size",
    y = "Model Type",
    fill = "Mean |Bias|",
    caption = sprintf("(MCSE range: %.3f-%.3f)", 
                      mcse_range$min_mcse, mcse_range$max_mcse)
  ) +
  scale_y_discrete(expand = c(0, 0), position = "right") +
  scale_x_discrete(expand = c(0, 0))
```

```{r, include=FALSE}
# Prepare data with labels for both RelativeBias and RelativeRMSE
plot_data_aggregated_study2 <- aggr_summary_study_2 %>%
  select(model_type, N, reliability, method, R_squared, b, mean_RelativeBias, mean_RelativeRMSE, 
         mean_MCSE_RelativeBias, mean_MCSE_RelativeRMSE) %>%
  mutate(
    N = factor(N, levels = c(100, 400, 6400)),
    reliability_label = factor(paste0("r==", reliability)),
    R_squared_label = factor(paste0("R^2==", R_squared)),
    b_label = factor(paste0("b==", b)),
    model_type = case_when(
      model_type == "2.1" ~ "no measurement MP",
      model_type == "2.2_exo" ~ "exogenous MP",
      model_type == "2.2_endo" ~ "endogenous MP",
      model_type == "2.2_both" ~ "endo- & exogenous MP",
      TRUE ~ model_type
    ),
    method = case_when(
      method == "lSAM_ML" ~ "lSAM-ML",
      method == "lSAM_ULS" ~ "lSAM-ULS",
      TRUE ~ method
    ),
    # Add asterisk for RelativeBias if MCSE is > 10% of estimate
    label_bias = ifelse(abs(mean_MCSE_RelativeBias) > abs(0.1 * mean_RelativeBias),
                       sprintf("%.2f*", mean_RelativeBias),
                       sprintf("%.2f", mean_RelativeBias)),
    # Add asterisk for RelativeRMSE if MCSE is > 10% of estimate
    label_rmse = ifelse(abs(mean_MCSE_RelativeRMSE) > abs(0.1 * mean_RelativeRMSE),
                       sprintf("%.2f*", mean_RelativeRMSE),
                       sprintf("%.2f", mean_RelativeRMSE))
  )

# Calculate MCSE ranges
mcse_bias_range <- range(aggr_summary_study_2$mean_MCSE_RelativeBias, na.rm = TRUE)
mcse_rmse_range <- range(aggr_summary_study_2$mean_MCSE_RelativeRMSE, na.rm = TRUE)

# RelativeBias Plot
fig_relbias_aggregated_study2 <- plot_data_aggregated_study2 %>%
  ggplot(aes(x = N, y = model_type)) +
  geom_tile(aes(fill = mean_RelativeBias), color = "white") +
  geom_text(aes(label = label_bias), size = 2.5, color = "black") +
  scale_fill_gradient2(low = "blue", mid = "white", high = "red", midpoint = 0, 
                      limits = c(0, 2), oob = scales::squish) +
  ggh4x::facet_nested(
    reliability_label ~ method + b_label + R_squared_label, 
    scales = "free", 
    space = "free", 
    switch = "y",
    labeller = label_parsed 
  ) +
  theme_bw() +
  theme(
    text = element_text(size = 8),
    axis.text.x = element_text(size = 7, angle = 45, hjust = 1),
    axis.text.y = element_text(size = 7),
    legend.position = "none", 
    legend.title = element_text(size = 8),
    legend.text = element_text(size = 7),
    strip.text.y = element_text(size = 7),
    strip.text.x = element_text(size = 7),
    legend.key.width = unit(0.8, "cm"),
    panel.grid = element_blank(),
    axis.title.x = element_blank(),
    axis.title.y = element_blank()
  ) +
  labs(
    x = "Sample Size",
    y = "Model Type",
    fill = "Mean Bias",
    caption = sprintf("(MCSE range: %.3f-%.3f)", mcse_bias_range[1], mcse_bias_range[2])
  ) +
  scale_y_discrete(expand = c(0, 0), position = "right") +
  scale_x_discrete(expand = c(0, 0))

# RelativeRMSE Plot
fig_relrmse_aggregated_study2 <- plot_data_aggregated_study2 %>%
  ggplot(aes(x = N, y = model_type)) +
  geom_tile(aes(fill = mean_RelativeRMSE), color = "white") +
  geom_text(aes(label = label_rmse), size = 2.5, color = "black") +
  scale_fill_gradient2(low = "blue", mid = "white", high = "red", midpoint = 0, 
                      limits = c(0, 2), oob = scales::squish) +
  ggh4x::facet_nested(
    reliability_label ~ method + b_label + R_squared_label, 
    scales = "free", 
    space = "free", 
    switch = "y",
    labeller = label_parsed 
  ) +
  theme_bw() +
  theme(
    text = element_text(size = 8),
    axis.text.x = element_text(size = 7, angle = 45, hjust = 1),
    axis.text.y = element_text(size = 7),
    legend.position = "none", 
    legend.title = element_text(size = 8),
    legend.text = element_text(size = 7),
    strip.text.y = element_text(size = 7),
    strip.text.x = element_text(size = 7),
    legend.key.width = unit(0.8, "cm"),
    panel.grid = element_blank(),
    axis.title.x = element_blank(),
    axis.title.y = element_blank()
  ) +
  labs(
    x = "Sample Size",
    y = "Model Type",
    fill = "Mean RMSE",
    caption = sprintf("(MCSE range: %.3f-%.3f)", mcse_rmse_range[1], mcse_rmse_range[2])
  ) +
  scale_y_discrete(expand = c(0, 0), position = "right") +
  scale_x_discrete(expand = c(0, 0))
```

```{r, include=FALSE}
data_plot <- full_data_paramwise

fig_bias_parameterwise_study3 <- data_plot %>%
  ggplot(aes(x = N, y = parameter)) +
  geom_tile(aes(fill = Bias_plot), color = "white") +
  geom_text(
    data = data_plot %>% filter(ConvergenceRateFlag == FALSE & !is.na(Bias)),
    aes(label = sprintf("%.2f", Bias)),
    size = 1.5,
    show.legend = FALSE
  ) +
  scale_fill_gradient2(
    low = "blue",
    mid = "white",
    high = "red",
    midpoint = 0, 
    limits = c(-0.5, 0.5), 
    oob = scales::squish,
    na.value = "gray80",
    name = "Bias"
  ) +
  ggh4x::facet_nested(model_type + reliability ~ method, scales = "free", space = "free", switch="y") +
  theme_bw() +
  theme(
    text = element_text(size = 8),
    axis.text.x = element_text(size = 5),
    axis.text.y = element_text(size = 4),
    legend.position = "right", 
    legend.title = element_text(size = 6),
    legend.text = element_text(size = 6),
    strip.text.y.left = element_text(size = 7),
    strip.text.y = element_text(size = 15),
    strip.text.x = element_text(size = 15),
    legend.key.width = unit(1, "cm"),
    panel.grid = element_line(linewidth = 0.01, color = "gray98"),
    axis.title.x = element_blank(),
    axis.title.y = element_blank()
  ) +
  guides(fill = guide_colorbar(title.position = "top", title.hjust = 0.5, barheight = 5, barwidth = 0.5, direction = "vertical")) +
  labs(
    x = "\n Sample Size",
    y = "Parameter \n",
    fill = "Bias"
  ) +
  scale_y_discrete(expand = c(0,0), position = "right") +
  scale_x_discrete(expand = c(0,0))

# Plotting code for parameterwise RMSE plot:
fig_rmse_parameterwise_study3 <- data_plot %>%
  ggplot(aes(x = N, y = parameter)) +
  geom_tile(aes(fill = RMSE_plot), color = "white") +
  geom_text(
    data = data_plot %>% filter(ConvergenceRateFlag == FALSE & !is.na(RMSE)),
    aes(label = sprintf("%.2f", RMSE)),
    size = 1.5,
    show.legend = FALSE
  ) +
  scale_fill_gradient2(
    low = "white",
    high = "red",
    limits = c(0, 0.5),
    oob = scales::squish,
    na.value = "gray80",
    name = "RMSE"
  ) +
  ggh4x::facet_nested(model_type + reliability ~ method, scales = "free", space = "free", switch="y") +
  theme_bw() +
  theme(
    text = element_text(size = 8),
    axis.text.x = element_text(size = 5),
    axis.text.y = element_text(size = 4),
    legend.position = "right", 
    legend.title = element_text(size = 6),
    legend.text = element_text(size = 6),
    strip.text.y.left = element_text(size = 7),
    strip.text.y = element_text(size = 15),
    strip.text.x = element_text(size = 15),
    legend.key.width = unit(1, "cm"),
    panel.grid = element_line(linewidth = 0.01, color = "gray98"),
    axis.title.x = element_blank(),
    axis.title.y = element_blank()
  ) +
  guides(fill = guide_colorbar(title.position = "top", title.hjust = 0.5, barheight = 5, barwidth = 0.5, direction = "vertical")) +
  labs(
    x = "\n Sample Size",
    y = "Parameter \n",
    fill = "RMSE"
  ) +
  scale_y_discrete(expand = c(0,0), position = "right") +
  scale_x_discrete(expand = c(0,0))

```

```{r, include=FALSE}
# Plotting code for aggregated bias plot:
fig_bias_aggregated_study3 <- full_data_study3 %>%
  ggplot(aes(x = N, y = model_type, fill = mean_Bias_plot)) +
  geom_tile(color = "white") +
  # Add mean values and MCSE
  geom_text(
    data = full_data_study3 %>% 
      filter(ConvergenceRateFlag == FALSE & !is.na(mean_Bias)),
    aes(label = sprintf("%.2f\n(%.3f)", mean_Bias, mean_MCSE_Bias)),
    size = 2.5,
    color = "black"
  ) +
  scale_fill_gradient2(
    low = "white",
    high = "red",
    limits = c(0, 0.5),
    oob = scales::squish,
    na.value = "gray80",
    name = "Mean Bias"
  ) +
  ggh4x::facet_nested(reliability ~ method, scales = "free", space = "free", switch = "y") +
  theme_bw() +
  theme(
    text = element_text(size = 8),
    axis.text.x = element_text(size = 7, angle = 45, hjust = 1),
    axis.text.y = element_text(size = 7),
    legend.position = "none",
    legend.title = element_text(size = 8),
    legend.text = element_text(size = 7),
    strip.text.y = element_text(size = 7),
    strip.text.x = element_text(size = 7),
    legend.key.width = unit(2, "cm"),
    panel.grid = element_blank(),
    axis.title.x = element_blank(),
    axis.title.y = element_blank(),
    plot.caption = element_text(hjust = 0, size = 7)
  ) +
  labs(
    x = "Sample Size",
    y = "Model Type"
  ) +
  scale_y_discrete(expand = c(0, 0), position = "right") +
  scale_x_discrete(expand = c(0, 0))

# Plotting code for aggregated RMSE plot:
fig_rmse_aggregated_study3 <- full_data_study3 %>%
  ggplot(aes(x = N, y = model_type, fill = mean_RMSE_plot)) +
  geom_tile(color = "white") +
  # Add mean values and MCSE
  geom_text(
    data = full_data_study3 %>% 
      filter(ConvergenceRateFlag == FALSE & !is.na(mean_RMSE)),
    aes(label = sprintf("%.2f\n(%.3f)", mean_RMSE, mean_MCSE_RMSE)),
    size = 2.5,
    color = "black"
  ) +
  scale_fill_gradient2(
    low = "white",
    high = "red",
    limits = c(0, 0.5),
    oob = scales::squish,
    na.value = "gray80",
    name = "Mean RMSE"
  ) +
  ggh4x::facet_nested(reliability ~ method, scales = "free", space = "free", switch = "y") +
  theme_bw() +
  theme(
    text = element_text(size = 8),
    axis.text.x = element_text(size = 7, angle = 45, hjust = 1),
    axis.text.y = element_text(size = 7),
    legend.position = "none", 
    legend.title = element_text(size = 8),
    legend.text = element_text(size = 7),
    strip.text.y = element_text(size = 7),
    strip.text.x = element_text(size = 7),
    legend.key.width = unit(0.8, "cm"),
    panel.grid = element_blank(),
    axis.title.x = element_blank(),
    axis.title.y = element_blank()
  ) +
  labs(
    x = "Sample Size",
    y = "Model Type",
    fill = "Mean RMSE"
  ) +
  scale_y_discrete(expand = c(0,0), position = "right") +
  scale_x_discrete(expand = c(0,0))

```

```{r, include=FALSE}

# Function to analyze differences between bounded SEM and SAM methods
analyze_differences <- function(data) {
  # Process data
  processed_data <- data %>%
    mutate(
      N = factor(paste("N =", N), levels = paste("N =", c(50, 100, 400, 6400))),
      reliability = factor(paste("r =", reliability), 
                           levels = paste("r =", c(0.3, 0.5, 0.7))),
      method = gsub("_", "-", method),
      model_type = case_when(
        model_type == "3.1" ~ "Cross Loadings positive",
        model_type == "3.2" ~ "Correlated Residuals positive",
        model_type == "3.1_negative" ~ "Cross Loadings negative",
        model_type == "3.2_negative" ~ "Correlated Residuals negative",
        TRUE ~ model_type
      )
    )
  
  # Get reference values for bounded SEM for both metrics
  sem_ref <- processed_data %>%
    filter(method == "SEM-bound") %>%
    select(model_type, N, reliability, mean_Bias, mean_RMSE) %>%
    rename(sem_bound_bias = mean_Bias,
           sem_bound_rmse = mean_RMSE)
  
  # Calculate differences for SAM methods (SEM - SAM)
  differences <- processed_data %>%
    filter(method %in% c("gSAM", "lSAM")) %>%
    left_join(sem_ref, by = c("model_type", "N", "reliability")) %>%
    mutate(
      bias_diff = sem_bound_bias - mean_Bias,
      rmse_diff = sem_bound_rmse - mean_RMSE
    )
  
  return(differences)
}

differences <- analyze_differences(aggr_summary_study_3)

# theme
common_theme <- theme_classic() +
  theme(
    axis.text.x = element_text(angle = 0, hjust = 0.5, size = 8),  # Reduced text size here
    legend.position = "top",
    strip.text = element_text(size = 10),
    panel.background = element_rect(fill = "white"),
    plot.background = element_rect(fill = "white"),
    strip.background = element_blank(),
    panel.border = element_blank()
  )

# Define the signed square root transformation
sign_sqrt_trans <- function() {
  trans_new("sign_sqrt",
            transform = function(x) sign(x) * sqrt(abs(x)),
            inverse = function(x) sign(x) * x^2,
            domain = c(-Inf, Inf))
}

# Modify the bias plot
p_bias <- ggplot(differences, 
                 aes(x = interaction(N, reliability, sep = "\n"), 
                     y = bias_diff,
                     fill = method)) +
  geom_col(position = position_dodge(width = 0.8), width = 0.7) +
  geom_errorbar(aes(ymin = bias_diff - mean_MCSE_Bias, 
                    ymax = bias_diff + mean_MCSE_Bias),
                position = position_dodge(width = 0.8),
                width = 0.2) +
  scale_fill_brewer(palette = "Set2") +
  common_theme +
  labs(
    x = "",
    y = "Bias (SEM - SAM)",
    fill = "Method"
  ) +
  facet_wrap(~model_type, scales = "free_x") +
  geom_hline(yintercept = 0, linetype = "dashed", color = "gray40") +
  scale_y_continuous(trans = sign_sqrt_trans())

# Modify the RMSE plot
p_rmse <- ggplot(differences, 
                 aes(x = interaction(N, reliability, sep = "\n"), 
                     y = rmse_diff,
                     fill = method)) +
  geom_col(position = position_dodge(width = 0.8), width = 0.7) +
  geom_errorbar(aes(ymin = rmse_diff - mean_MCSE_RMSE, 
                    ymax = rmse_diff + mean_MCSE_RMSE),
                position = position_dodge(width = 0.8),
                width = 0.2) +
  scale_fill_brewer(palette = "Set2") +
  common_theme +
  labs(
    x = "",
    y = "RMSE (SEM - SAM)",
    fill = "Method"
  ) +
  facet_wrap(~model_type, scales = "free_x") +
  geom_hline(yintercept = 0, linetype = "dashed", color = "gray40") +
  scale_y_continuous(trans = sign_sqrt_trans())

# Combine plots vertically
fig_sam_sem_diff_study3 <- p_bias / p_rmse + 
  plot_layout(guides = "collect") &
  theme(legend.position = "top")

# Display the combined plot
print(fig_sam_sem_diff_study3)


```

```{r, include=FALSE, eval=FALSE}
# Create 'plots/' directory if it doesn't exist
if (!dir.exists("plots")) {
  dir.create("plots")
}
# Create 'plots/' directory if it doesn't exist
if (!dir.exists("plots")) {
  dir.create("plots")
}

# Save plots with updated dimensions (e.g., 10 x 5.6 inches for full-width 16:9 slide)
ggsave("plots/fig_conv_rate_study1.png", plot = fig_conv_rate_study1, width = 10, height = 5.6, dpi = 300)
ggsave("plots/fig_conv_rate_study2.png", plot = p_convergence_heatmap_study2, width = 10, height = 5.6, dpi = 300)
ggsave("plots/fig_conv_rate_study3.png", plot = fig_conv_rate_study3, width = 10, height = 5.6, dpi = 300)
ggsave("plots/fig_bias_parameterwise_study1.png", plot = fig_bias_parameterwise_study1, width = 10, height = 5.6, dpi = 300)
ggsave("plots/fig_bias_aggregated_study1.png", plot = fig_bias_aggregated_study1, width = 10, height = 5.6, dpi = 300)
ggsave("plots/fig_rmse_aggregated_study1.png", plot = fig_rmse_aggregated_study1, width = 10, height = 5.6, dpi = 300)
ggsave("plots/fig_relbias_parameterwise_study2.png", plot = fig_relbias_parameterwise_study2, width = 10, height = 5.6, dpi = 300)
ggsave("plots/fig_bias_aggregated_misspec_study2.png", plot = fig_bias_aggregated_misspec_study2, width = 10, height = 5.6, dpi = 300)
ggsave("plots/fig_relbias_aggregated_study2.png", plot = fig_relbias_aggregated_study2, width = 10, height = 5.6, dpi = 300)
ggsave("plots/fig_relrmse_aggregated_study2.png", plot = fig_relrmse_aggregated_study2, width = 10, height = 5.6, dpi = 300)
ggsave("plots/fig_bias_parameterwise_study3.png", plot = fig_bias_parameterwise_study3, width = 10, height = 5.6, dpi = 300)
ggsave("plots/fig_rmse_parameterwise_study3.png", plot = fig_rmse_parameterwise_study3, width = 10, height = 5.6, dpi = 300)
ggsave("plots/fig_bias_aggregated_study3.png", plot = fig_bias_aggregated_study3, width = 10, height = 5.6, dpi = 300)
ggsave("plots/fig_rmse_aggregated_study3.png", plot = fig_rmse_aggregated_study3, width = 10, height = 5.6, dpi = 300)
ggsave("plots/fig_sam_sem_diff_study3.png", plot = fig_sam_sem_diff_study3, width = 10, height = 7.5, dpi = 300)
```